
class Circle {
    field int m_radius;
    field int m_posX, m_posY;

    constructor Circle new(int radius, int posX, int posY) {
        let m_radius = radius;
        let m_posX = posX;
        let m_posY = posY;
        return this;
    }

    method int getRadius() {
        return m_radius;
    }

    method int getPosX() {
        return m_posX;
    }

    method int getPosY() {
        return m_posY;
    }

    method void setPostionX(int posX) {
        let m_posX = posX;
        return;
    }

    method void setPostionY(int posY) {
        let m_posY = posY;
        return;
    }

    method void setRadius(int radius) {
        let m_radius = radius;
        return;
    }

    method void move(int moveX, int moveY) {
        do setPostionX(m_posX + moveX);
        do setPostionY(m_posY + moveY);
        return;
    }

    method boolean isCollidingWith(Circle circleB) {
        var int circleARadius, circleBRadius;
        var int circleAPosX, circleAPosY, circleBPosX, circleBPosY;
        var int distanceX, distanceY;
        var int distance;
        let circleARadius = m_radius;
        let circleBRadius = circleB.getRadius();
        let circleAPosX = m_posX;
        let circleAPosY = m_posY;
        let circleBPosX = circleB.getPosX();
        let circleBPosY = circleB.getPosY();
        // Distance vec
        let distanceX = circleAPosX - circleBPosX;
        let distanceY = circleAPosY - circleBPosY;
        // The disntance between both circles, calcualted by pythagoras
        let distance = Math.sqrt((distanceX * distanceX) + (distanceY * distanceY));
        // If the disntance is smaller then the sum if both radius, its a collsision
        if (distance < (circleARadius + circleBRadius)) {
            return true;
        }
        return false;
    }

    method void draw() {
        do Screen.drawCircle(m_posX, m_posY, m_radius);
        return;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

}
